import type { FolderApi } from "tweakpane";
import type { FlightController } from "@/widgets/controllers/FlightController"; 

/**
 * üõ©Ô∏è SpaceShip Physics Debug Module
 * FlightControllerÏùò Î¨ºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ïã§ÏãúÍ∞Ñ Ï°∞Ï†ï Î∞è ÎîîÎ≤ÑÍπÖ Îã¥Îãπ
 */
export class SpaceShipPhysicsDebugModule {
  constructor(private flightController: FlightController) {}

  /**
   * Physics Í¥ÄÎ†® ÎîîÎ≤ÑÍ∑∏ Ïª®Ìä∏Î°§ ÏÑ§Ï†ï
   */
  setupDebugControls(parentFolder: FolderApi): void {
    this.setupFlightInputButtons(parentFolder);
    this.setupPhysicsParameterControls(parentFolder);
    this.setupFlightStatusButton(parentFolder);
  }

  /**
   * ÎπÑÌñâ ÏûÖÎ†• ÏÉÅÌÉú Ï°∞Ìöå Î≤ÑÌäºÎì§
   */
  private setupFlightInputButtons(parentFolder: FolderApi): void {
    parentFolder.addButton({ title: "Flight Inputs" }).on("click", () => {
      console.log("Roll Input:", this.flightController.getRollInput().toFixed(2));
      console.log("Thrust Input:", this.flightController.getThrustInput().toFixed(2));
    });

    parentFolder.addButton({ title: "Current Velocities" }).on("click", () => {
      console.log("Y-axis Rotation (Horizontal Turn):", this.flightController.getCurrentRollVelocity().toFixed(2), "rad/s");
      console.log("Thrust Velocity:", this.flightController.getCurrentThrustVelocity().toFixed(2), "m/s");
      console.log("Z-axis Rotation (Pitch):", this.flightController.getCurrentPitchVelocity().toFixed(2), "rad/s");
    });

    parentFolder.addButton({ title: "Banking-to-Turn Info" }).on("click", () => {
      console.log("Current Y-rotation Angle:", this.flightController.getCurrentRollAngle().toFixed(2), "¬∞");
      console.log("Banking Factor:", this.flightController.getBankingToTurnFactor());
      console.log("Is Turning:", this.flightController.getIsTurning());
      console.log("Pitch Compensation:", this.flightController.getTurnPitchCompensation());
    });

    parentFolder.addButton({ title: "Speed Settings" }).on("click", () => {
      console.log("Max Roll Speed:", this.flightController.getRollSpeed(), "deg/s");
      console.log("Max Thrust Speed:", this.flightController.getThrustSpeed(), "m/s");
      console.log("üöÄ Thrust Acceleration:", this.flightController.getThrustAcceleration(), "m/s¬≤");
      console.log("üîÑ Roll Acceleration:", this.flightController.getRollAcceleration(), "rad/s¬≤");
      console.log("üõë Air Resistance:", this.flightController.getAirResistance());
      console.log("üåÄ Rotational Drag:", this.flightController.getRotationalDrag());
    });
  }

  /**
   * Ïã§ÏãúÍ∞Ñ Î¨ºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ï°∞Ï†ï Ïä¨ÎùºÏù¥ÎçîÎì§
   */
  private setupPhysicsParameterControls(parentFolder: FolderApi): void {
    const physicsFolder = parentFolder.addFolder({ title: "‚úàÔ∏è Realistic Flight Physics", expanded: true });
    
    const physicsParams = {
      thrustAcceleration: this.flightController.getThrustAcceleration(),
      rollAcceleration: this.flightController.getRollAcceleration(),
      airResistance: this.flightController.getAirResistance(),
      rotationalDrag: this.flightController.getRotationalDrag(),
      rollInertia: this.flightController.getRollInertia(),
      pitchInertia: this.flightController.getPitchInertia()
    };

    physicsFolder.addBinding(physicsParams, 'thrustAcceleration', {
      min: 1.0, max: 15.0, step: 0.5,
      label: 'üöÄ Thrust Accel'
    }).on('change', (ev) => {
      this.flightController.setThrustAcceleration(ev.value);
    });

    physicsFolder.addBinding(physicsParams, 'rollAcceleration', {
      min: 0.5, max: 8.0, step: 0.2,
      label: 'üîÑ Roll Accel'
    }).on('change', (ev) => {
      this.flightController.setRollAcceleration(ev.value);
    });

    physicsFolder.addBinding(physicsParams, 'airResistance', {
      min: 0.7, max: 0.99, step: 0.01,
      label: 'üõë Air Resistance'
    }).on('change', (ev) => {
      this.flightController.setAirResistance(ev.value);
    });

    physicsFolder.addBinding(physicsParams, 'rotationalDrag', {
      min: 0.7, max: 0.99, step: 0.01,
      label: 'üåÄ Rotation Drag'
    }).on('change', (ev) => {
      this.flightController.setRotationalDrag(ev.value);
    });

    physicsFolder.addBinding(physicsParams, 'rollInertia', {
      min: 0.5, max: 3.0, step: 0.1,
      label: '‚öñÔ∏è Roll Inertia'
    }).on('change', (ev) => {
      this.flightController.setRollInertia(ev.value);
    });

    physicsFolder.addBinding(physicsParams, 'pitchInertia', {
      min: 0.5, max: 4.0, step: 0.1,
      label: 'üìê Pitch Inertia'
    }).on('change', (ev) => {
      this.flightController.setPitchInertia(ev.value);
    });
  }

  /**
   * Ï¢ÖÌï© ÎπÑÌñâ ÏÉÅÌÉú Ï†ïÎ≥¥ Î≤ÑÌäº
   */
  private setupFlightStatusButton(parentFolder: FolderApi): void {
    parentFolder.addButton({ title: "Horizontal Flight Control" }).on("click", () => {
      console.log("üõ©Ô∏è === HORIZONTAL FLIGHT CONTROL STATUS ===");
      console.log("üìä INPUTS:");
      console.log("  Roll Input (A/D ‚Üí Y-axis rotation):", this.flightController.getRollInput().toFixed(2));
      console.log("  Thrust Input (W/S):", this.flightController.getThrustInput().toFixed(2));
      console.log("  Is Turning (WA/WD):", this.flightController.getIsTurning());
      
      console.log("‚ö° VELOCITIES:");
      console.log("  Y-axis Rotation (Horizontal Turn):", this.flightController.getCurrentRollVelocity().toFixed(3), "rad/s");
      console.log("  Z-axis Rotation (Pitch):", this.flightController.getCurrentPitchVelocity().toFixed(3), "rad/s");
      console.log("  Thrust Velocity:", this.flightController.getCurrentThrustVelocity().toFixed(2), "m/s");
      
      console.log("üìê CURRENT ATTITUDES:");
      console.log("  Current Y-rotation Angle:", this.flightController.getCurrentRollAngle().toFixed(2), "¬∞");
      
      console.log("‚öôÔ∏è CONTROL FACTORS:");
      console.log("  Banking-to-Turn Factor:", this.flightController.getBankingToTurnFactor());
      console.log("  Pitch Compensation:", this.flightController.getTurnPitchCompensation());
    });
  }
}
